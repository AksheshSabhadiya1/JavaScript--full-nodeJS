// Version in nodeJS

Ex. ^4.21.2

1st part :- 4
2nd part :- 21
3rd part :- 2


// 3rd part (optional part)
--> minor changes

// 2nd part 
--> Recommanded bug fixes (security)

// 1st part
--> Major / Breaking Updates

^ :- install all Recommanded and minor fixes automatic




// REST API  :- REpresantational State Transfer API(Application Program Interface) 
             :- It's provide a communication between server and client at different system over internet
             :- it's has some rules you must be follow like,
                   1) client-server approach
                   2) respect GET, POST, PUT, PATCH, DELETE http methods


                       --req-->   
              client             server
                       <--res--


                

// Headers  :- it's represent the metadata API of request and response
            :- Headers carry information of request and response body
            :- content-type: application/json, text/html



// HTTP status code     :- indicate that http request succesfully completed or not.

Informational response :- 100 to 199
Successful response    :- 200 to 299
Redirection response   :- 300 to 399
Client error response  :- 400 to 499
Server error response  :- 500 to 599


--> commonly used status code,
100 - Continue
102 - Processing
200 - OK
201 - Created
202 - Accepted
301 - Move Permanently
302 - Found
307 - Temporary Redirect
308 - Permanent Redirect
400 - Bad Request
401 - Unauthorized
403 - Forbidden
404 - Not Found
500 - Internal Server Error
503 - Service Unavialable
504 - Gateway Timeout
507 - Insufficient Storage




## // How MongoDB works...... // ##

Schema :- Define the Schema
    Using Schema do model
        Using model do CRUD operation


# Add data 
Model_name.create({})

# Read data
Model_name.find()

# Update data 
Model_name.findByIdAndUpdate()

# Delete data 
Model_name.findByIdAndDelete()





// MVC ( Model, View, Controller )

model :- Interact with Database
view  :- UI page
Controller :- connection between model and view 



// Authentication 

1) statefull    :- which maintain state or data on serverside
                :- If server restart or state is lost for some reason then all users logout
                :- It takes memory of server which is harmful

2) stateless    :- which has no state